package io.multiversum.db.executor.core.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Database extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50613093806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063746ac4bc11610097578063a06c054311610066578063a06c054314610283578063c1c6e17a146102b3578063cfb05a1d146102cf578063d95b9be7146102ff576100f4565b8063746ac4bc146101e95780639a55de52146102195780639a7746a9146102375780639f1f3a7614610267576100f4565b80632b4a8e02116100d35780632b4a8e0214610163578063308513b9146101815780633ecc0f5e146101b157806353fed4c1146101cd576100f4565b80625e810f146100f9578063028c0907146101155780631c6188ae14610133575b600080fd5b610113600480360381019061010e919061252e565b61032f565b005b61011d6104e3565b60405161012a9190612e5b565b60405180910390f35b61014d60048036038101906101489190612505565b6104f9565b60405161015a9190612e17565b60405180910390f35b61016b610660565b6040516101789190612cd3565b60405180910390f35b61019b6004803603810190610196919061252e565b6108f6565b6040516101a89190612cd3565b60405180910390f35b6101cb60048036038101906101c691906127cd565b610ab1565b005b6101e760048036038101906101e291906126ba565b610af6565b005b61020360048036038101906101fe9190612557565b610d89565b6040516102109190612e17565b60405180910390f35b6102216110ae565b60405161022e9190612e5b565b60405180910390f35b610251600480360381019061024c91906125c3565b6110c3565b60405161025e9190612cd3565b60405180910390f35b610281600480360381019061027c919061266b565b6113c9565b005b61029d6004803603810190610298919061276a565b6115a4565b6040516102aa9190612cb1565b60405180910390f35b6102cd60048036038101906102c891906125c3565b611a45565b005b6102e960048036038101906102e491906125ff565b611ca3565b6040516102f69190612e17565b60405180910390f35b610319600480360381019061031491906125c3565b611f7c565b6040516103269190612e17565b60405180910390f35b8060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cb90612d97565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061041e57fe5b9060005260206000209060020201600080820160009055600182016000905550506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdf71244cb91cf29ec3c4b03a58ce9fde19bd624004fe8ed2569a9234fa6fef8e826040516104d79190612e17565b60405180910390a15050565b600060049054906101000a900463ffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052806005548152602001848152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060006101000a81548160ff02191690831515021790555060006005549050610618600160055461210890919063ffffffff16565b6005819055507f658a8369b30342cdf81c3ec8d6e8540465b59b181fa3deaeac563cb0aa097941818460405161064f929190612e32565b60405180910390a180915050919050565b6060806002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050026040519080825280602002602001820160405280156106d75781602001602082028036833780820191505090505b50905060008090505b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156108ee57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106107b557fe5b906000526020600020906002020160000154815260200190815260200160002060009054906101000a900460ff166107ec576108e1565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061083657fe5b90600052602060002090600202016000015460001b82600283028151811061085a57fe5b602002602001018181525050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106108b057fe5b9060005260206000209060020201600101548260016002840201815181106108d457fe5b6020026020010181815250505b80806001019150506106e0565b508091505090565b606080600280600085815260200190815260200160002080549050026040519080825280602002602001820160405280156109405781602001602082028036833780820191505090505b50905060008090505b6002600085815260200190815260200160002080549050811015610aa757600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002600087815260200190815260200160002083815481106109c657fe5b906000526020600020906005020160000154815260200190815260200160002060009054906101000a900460ff166109fd57610a9a565b600260008581526020019081526020016000208181548110610a1b57fe5b90600052602060002090600502016000015460001b826002830281518110610a3f57fe5b602002602001018181525050600260008581526020019081526020016000208181548110610a6957fe5b906000526020600020906005020160010154826001600284020181518110610a8d57fe5b6020026020010181815250505b8080600101915050610949565b5080915050919050565b816000806101000a81548163ffffffff021916908363ffffffff16021790555080600060046101000a81548163ffffffff021916908363ffffffff1602179055505050565b8660011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9290612d97565b60405180910390fd5b8660011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790612df7565b60405180910390fd5b838390508686905014610c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7f90612d37565b60405180910390fd5b6000600260008b81526020019081526020016000208981548110610ca857fe5b90600052602060002090600502016002016002018881548110610cc757fe5b90600052602060002001905060008090505b87879050811015610d4557858582818110610cf057fe5b9050602002810190610d029190612e76565b838a8a85818110610d0f57fe5b9050602002013581548110610d2057fe5b906000526020600020019190610d37929190612202565b508080600101915050610cd9565b507f5f2a718c96e7b2904604386dddcd78e091d467a410be171ac9562cf58332065c88604051610d759190612e17565b60405180910390a150505050505050505050565b60008460011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2790612d97565b60405180910390fd5b60008484905011610e76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6d90612dd7565b60405180910390fd5b60026000878152602001908152602001600020600181600181540180825580915050039060005260206000209050506000600260008881526020019081526020016000206001600260008a8152602001908152602001600020805490500381548110610ede57fe5b9060005260206000209060050201905085816001018190555060065481600001819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600654815260200190815260200160002060006101000a81548160ff02191690831515021790555060008090505b8585905081101561104357816002016001016040518060400160405280888885818110610f9c57fe5b9050602002013560001c6006811115610fb157fe5b6006811115610fbc57fe5b8152602001888860018601818110610fd057fe5b90506020020135815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff0219169083600681111561102757fe5b0217905550602082015181600101555050600281019050610f73565b5060006006549050611061600160065461210890919063ffffffff16565b6006819055507f4944ea4e168fc6b752b8443ae22fcfcbdcfbcaa1a21623a65585cc8d5a87d65c8188604051611098929190612e32565b60405180910390a1809350505050949350505050565b6000809054906101000a900463ffffffff1681565b60608260011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461116a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116190612d97565b60405180910390fd5b8260011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461120f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120690612df7565b60405180910390fd5b60606002806000888152602001908152602001600020868154811061123057fe5b906000526020600020906005020160020160010180549050026040519080825280602002602001820160405280156112775781602001602082028036833780820191505090505b50905060008090505b60026000888152602001908152602001600020868154811061129e57fe5b9060005260206000209060050201600201600101805490508110156113bc576002600088815260200190815260200160002086815481106112db57fe5b906000526020600020906005020160020160010181815481106112fa57fe5b906000526020600020906002020160000160009054906101000a900460ff16600681111561132457fe5b60001b82600283028151811061133657fe5b60200260200101818152505060026000888152602001908152602001600020868154811061136057fe5b9060005260206000209060050201600201600101818154811061137f57fe5b9060005260206000209060020201600101548260016002840201815181106113a357fe5b6020026020010181815250508080600101915050611280565b5080935050505092915050565b8260011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590612d97565b60405180910390fd5b8260011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a90612df7565b60405180910390fd5b60026000868152602001908152602001600020848154811061153157fe5b9060005260206000209060050201600201600201838154811061155057fe5b9060005260206000200160006115669190612282565b7fea7b1d2bbe9f9538f0f58f4192a22a507badb377e854a0df05f827c57e65a4ae836040516115959190612e17565b60405180910390a15050505050565b60608460011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461164b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164290612d97565b60405180910390fd5b8460011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146116f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e790612df7565b60405180910390fd5b6000851015611734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172b90612d17565b60405180910390fd5b60008410158015611746575060328411155b611785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177c90612d77565b60405180910390fd5b6002600088815260200190815260200160002086815481106117a357fe5b90600052602060002090600502016002016002018054905085106117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f390612db7565b60405180910390fd5b6000611811858761210890919063ffffffff16565b9050600081600260008b8152602001908152602001600020898154811061183457fe5b90600052602060002090600502016002016002018054905010611857578161188e565b600260008a8152602001908152602001600020888154811061187557fe5b9060005260206000209060050201600201600201805490505b90506060816040519080825280602002602001820160405280156118c657816020015b60608152602001906001900390816118b15790505b50905060008890505b82811015611a3457600260008c81526020019081526020016000208a815481106118f557fe5b9060005260206000209060050201600201600201818154811061191457fe5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156119fa578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119e65780601f106119bb576101008083540402835291602001916119e6565b820191906000526020600020905b8154815290600101906020018083116119c957829003601f168201915b50505050508152602001906001019061193e565b5050505082611a128b8461215d90919063ffffffff16565b81518110611a1c57fe5b602002602001018190525080806001019150506118cf565b508095505050505050949350505050565b8160011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190612d97565b60405180910390fd5b8160011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514611b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8690612df7565b60405180910390fd5b600260008581526020019081526020016000208381548110611bad57fe5b9060005260206000209060050201600080820160009055600182016000905560028201600080820160009055600182016000611be991906122a3565b600282016000611bf991906122c7565b505050506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055507f1f021955ea3ca7b0b75fb7d837e741808206bfe020592ea2e3f9cc461cd2e6c583604051611c959190612e17565b60405180910390a150505050565b60008460011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190612d97565b60405180910390fd5b8460011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de690612df7565b60405180910390fd5b600260008881526020019081526020016000208681548110611e0d57fe5b906000526020600020906005020160020160020160018160018154018082558091505003906000526020600020505060006001600260008a81526020019081526020016000208881548110611e5e57fe5b90600052602060002090600502016002016002018054905003905060008090505b86869050811015611f3657600260008a81526020019081526020016000208881548110611ea857fe5b90600052602060002090600502016002016002018281548110611ec757fe5b90600052602060002001878783818110611edd57fe5b9050602002810190611eef9190612e76565b90918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190611f28929190612202565b508080600101915050611e7f565b507f2d07fea1c1dda468753e4667157fc4b0f62d5ac0a65b6531b079c243ee938cb281604051611f669190612e17565b60405180910390a1809350505050949350505050565b60008260011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201a90612d97565b60405180910390fd5b8260011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90612df7565b60405180910390fd5b6002600086815260200190815260200160002084815481106120e657fe5b9060005260206000209060050201600201600201805490509250505092915050565b600080828401905083811015612153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214a90612d57565b60405180910390fd5b8091505092915050565b600061219f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121a7565b905092915050565b60008383111582906121ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e69190612cf5565b60405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061224357803560ff1916838001178555612271565b82800160010185558215612271579182015b82811115612270578235825591602001919060010190612255565b5b50905061227e91906122e8565b5090565b50805460008255906000526020600020908101906122a0919061230d565b50565b50805460008255600202906000526020600020908101906122c49190612339565b50565b50805460008255906000526020600020908101906122e59190612374565b50565b61230a91905b808211156123065760008160009055506001016122ee565b5090565b90565b61233691905b80821115612332576000818161232991906123a0565b50600101612313565b5090565b90565b61237191905b8082111561236d57600080820160006101000a81549060ff021916905560018201600090555060020161233f565b5090565b90565b61239d91905b8082111561239957600081816123909190612282565b5060010161237a565b5090565b90565b50805460018160011615610100020316600290046000825580601f106123c657506123e5565b601f0160209004906000526020600020908101906123e491906122e8565b5b50565b60008083601f8401126123fa57600080fd5b8235905067ffffffffffffffff81111561241357600080fd5b60208301915083602082028301111561242b57600080fd5b9250929050565b60008083601f84011261244457600080fd5b8235905067ffffffffffffffff81111561245d57600080fd5b60208301915083602082028301111561247557600080fd5b9250929050565b60008083601f84011261248e57600080fd5b8235905067ffffffffffffffff8111156124a757600080fd5b6020830191508360208202830111156124bf57600080fd5b9250929050565b6000813590506124d581613018565b92915050565b6000813590506124ea8161302f565b92915050565b6000813590506124ff81613046565b92915050565b60006020828403121561251757600080fd5b6000612525848285016124c6565b91505092915050565b60006020828403121561254057600080fd5b600061254e848285016124db565b91505092915050565b6000806000806060858703121561256d57600080fd5b600061257b878288016124db565b945050602061258c878288016124c6565b935050604085013567ffffffffffffffff8111156125a957600080fd5b6125b5878288016123e8565b925092505092959194509250565b600080604083850312156125d657600080fd5b60006125e4858286016124db565b92505060206125f5858286016124db565b9150509250929050565b6000806000806060858703121561261557600080fd5b6000612623878288016124db565b9450506020612634878288016124db565b935050604085013567ffffffffffffffff81111561265157600080fd5b61265d87828801612432565b925092505092959194509250565b60008060006060848603121561268057600080fd5b600061268e868287016124db565b935050602061269f868287016124db565b92505060406126b0868287016124db565b9150509250925092565b600080600080600080600060a0888a0312156126d557600080fd5b60006126e38a828b016124db565b97505060206126f48a828b016124db565b96505060406127058a828b016124db565b955050606088013567ffffffffffffffff81111561272257600080fd5b61272e8a828b0161247c565b9450945050608088013567ffffffffffffffff81111561274d57600080fd5b6127598a828b01612432565b925092505092959891949750929550565b6000806000806080858703121561278057600080fd5b600061278e878288016124db565b945050602061279f878288016124db565b93505060406127b0878288016124db565b92505060606127c1878288016124db565b91505092959194509250565b600080604083850312156127e057600080fd5b60006127ee858286016124f0565b92505060206127ff858286016124f0565b9150509250929050565b6000612815838361291c565b905092915050565b60006128298383612991565b60208301905092915050565b600061284183836129e8565b905092915050565b600061285482612efd565b61285e8185612f5b565b93508360208202850161287085612ecd565b8060005b858110156128ac578484038952815161288d8582612809565b945061289883612f34565b925060208a01995050600181019050612874565b50829750879550505050505092915050565b60006128c982612f08565b6128d38185612f6c565b93506128de83612edd565b8060005b8381101561290f5781516128f6888261281d565b975061290183612f41565b9250506001810190506128e2565b5085935050505092915050565b600061292782612f13565b6129318185612f7d565b93508360208202850161294385612eed565b8060005b8581101561297f57848403895281516129608582612835565b945061296b83612f4e565b925060208a01995050600181019050612947565b50829750879550505050505092915050565b61299a81612fb0565b82525050565b6129a981612fb0565b82525050565b60006129ba82612f29565b6129c48185612f9f565b93506129d4818560208601612fd4565b6129dd81613007565b840191505092915050565b60006129f382612f1e565b6129fd8185612f8e565b9350612a0d818560208601612fd4565b612a1681613007565b840191505092915050565b6000612a2e602983612f9f565b91507f4f6666736574206d757374206265206120706f73697469766520696e7465676560008301527f72206f72207a65726f00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a94603183612f9f565b91507f436f6c756d6e7320616e642076616c75657320617272617973206d757374206260008301527f65206f6620657175616c206c656e6774680000000000000000000000000000006020830152604082019050919050565b6000612afa601b83612f9f565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612b3a601e83612f9f565b91507f4c696d6974206d757374206265206265747765656e203020616e6420353000006000830152602082019050919050565b6000612b7a601583612f9f565b91507f536368656d6120646f6573206e6f7420657869737400000000000000000000006000830152602082019050919050565b6000612bba602e83612f9f565b91507f4f6666736574206d75737420626520736d616c6c65722074686174207468652060008301527f6e756d626572206f6620726f77730000000000000000000000000000000000006020830152604082019050919050565b6000612c20601383612f9f565b91507f456d70747920636f6c756d6e73206172726179000000000000000000000000006000830152602082019050919050565b6000612c60601483612f9f565b91507f5461626c6520646f6573206e6f742065786973740000000000000000000000006000830152602082019050919050565b612c9c81612fba565b82525050565b612cab81612fc4565b82525050565b60006020820190508181036000830152612ccb8184612849565b905092915050565b60006020820190508181036000830152612ced81846128be565b905092915050565b60006020820190508181036000830152612d0f81846129af565b905092915050565b60006020820190508181036000830152612d3081612a21565b9050919050565b60006020820190508181036000830152612d5081612a87565b9050919050565b60006020820190508181036000830152612d7081612aed565b9050919050565b60006020820190508181036000830152612d9081612b2d565b9050919050565b60006020820190508181036000830152612db081612b6d565b9050919050565b60006020820190508181036000830152612dd081612bad565b9050919050565b60006020820190508181036000830152612df081612c13565b9050919050565b60006020820190508181036000830152612e1081612c53565b9050919050565b6000602082019050612e2c6000830184612c93565b92915050565b6000604082019050612e476000830185612c93565b612e5460208301846129a0565b9392505050565b6000602082019050612e706000830184612ca2565b92915050565b60008083356001602003843603038112612e8f57600080fd5b80840192508235915067ffffffffffffffff821115612ead57600080fd5b602083019250600182023603831315612ec557600080fd5b509250929050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b83811015612ff2578082015181840152602081019050612fd7565b83811115613001576000848401525b50505050565b6000601f19601f8301169050919050565b61302181612fb0565b811461302c57600080fd5b50565b61303881612fba565b811461304357600080fd5b50565b61304f81612fc4565b811461305a57600080fd5b5056fea264697066735822122086fd8ea23060dfcd5244a4ab06d51eebf6241a2fa644953a753ac84c23118aa264736f6c63430006040033";

    public static final String FUNC_VERSIONMAJOR = "VersionMajor";

    public static final String FUNC_VERSIONMINOR = "VersionMinor";

    public static final String FUNC_CREATESCHEMA = "createSchema";

    public static final String FUNC_CREATETABLE = "createTable";

    public static final String FUNC_DELETEDIRECT = "deleteDirect";

    public static final String FUNC_DESC = "desc";

    public static final String FUNC_DROPSCHEMA = "dropSchema";

    public static final String FUNC_DROPTABLE = "dropTable";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_ROWSCOUNT = "rowsCount";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_SHOWSCHEMAS = "showSchemas";

    public static final String FUNC_SHOWTABLES = "showTables";

    public static final String FUNC_UPDATEDIRECT = "updateDirect";

    public static final Event ROWCREATED_EVENT = new Event("RowCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ROWDELETED_EVENT = new Event("RowDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ROWUPDATED_EVENT = new Event("RowUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SCHEMACREATED_EVENT = new Event("SchemaCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SCHEMADROPPED_EVENT = new Event("SchemaDropped", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TABLECREATED_EVENT = new Event("TableCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event TABLEDROPPED_EVENT = new Event("TableDropped", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1584827102800", "0x91F265fB96104A71AceC67FadA13beBda49867c5");
        _addresses.put("1585260607749", "0x55e8e71494454502efb6b2873dCe88BC39A30864");
    }

    @Deprecated
    protected Database(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Database(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Database(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Database(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<RowCreatedEventResponse> getRowCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROWCREATED_EVENT, transactionReceipt);
        ArrayList<RowCreatedEventResponse> responses = new ArrayList<RowCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RowCreatedEventResponse typedResponse = new RowCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RowCreatedEventResponse> rowCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RowCreatedEventResponse>() {
            @Override
            public RowCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROWCREATED_EVENT, log);
                RowCreatedEventResponse typedResponse = new RowCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RowCreatedEventResponse> rowCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROWCREATED_EVENT));
        return rowCreatedEventFlowable(filter);
    }

    public List<RowDeletedEventResponse> getRowDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROWDELETED_EVENT, transactionReceipt);
        ArrayList<RowDeletedEventResponse> responses = new ArrayList<RowDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RowDeletedEventResponse typedResponse = new RowDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RowDeletedEventResponse> rowDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RowDeletedEventResponse>() {
            @Override
            public RowDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROWDELETED_EVENT, log);
                RowDeletedEventResponse typedResponse = new RowDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RowDeletedEventResponse> rowDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROWDELETED_EVENT));
        return rowDeletedEventFlowable(filter);
    }

    public List<RowUpdatedEventResponse> getRowUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROWUPDATED_EVENT, transactionReceipt);
        ArrayList<RowUpdatedEventResponse> responses = new ArrayList<RowUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RowUpdatedEventResponse typedResponse = new RowUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RowUpdatedEventResponse> rowUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RowUpdatedEventResponse>() {
            @Override
            public RowUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROWUPDATED_EVENT, log);
                RowUpdatedEventResponse typedResponse = new RowUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RowUpdatedEventResponse> rowUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROWUPDATED_EVENT));
        return rowUpdatedEventFlowable(filter);
    }

    public List<SchemaCreatedEventResponse> getSchemaCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SCHEMACREATED_EVENT, transactionReceipt);
        ArrayList<SchemaCreatedEventResponse> responses = new ArrayList<SchemaCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SchemaCreatedEventResponse typedResponse = new SchemaCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SchemaCreatedEventResponse> schemaCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SchemaCreatedEventResponse>() {
            @Override
            public SchemaCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SCHEMACREATED_EVENT, log);
                SchemaCreatedEventResponse typedResponse = new SchemaCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SchemaCreatedEventResponse> schemaCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SCHEMACREATED_EVENT));
        return schemaCreatedEventFlowable(filter);
    }

    public List<SchemaDroppedEventResponse> getSchemaDroppedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SCHEMADROPPED_EVENT, transactionReceipt);
        ArrayList<SchemaDroppedEventResponse> responses = new ArrayList<SchemaDroppedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SchemaDroppedEventResponse typedResponse = new SchemaDroppedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SchemaDroppedEventResponse> schemaDroppedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SchemaDroppedEventResponse>() {
            @Override
            public SchemaDroppedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SCHEMADROPPED_EVENT, log);
                SchemaDroppedEventResponse typedResponse = new SchemaDroppedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SchemaDroppedEventResponse> schemaDroppedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SCHEMADROPPED_EVENT));
        return schemaDroppedEventFlowable(filter);
    }

    public List<TableCreatedEventResponse> getTableCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TABLECREATED_EVENT, transactionReceipt);
        ArrayList<TableCreatedEventResponse> responses = new ArrayList<TableCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TableCreatedEventResponse typedResponse = new TableCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TableCreatedEventResponse> tableCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TableCreatedEventResponse>() {
            @Override
            public TableCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TABLECREATED_EVENT, log);
                TableCreatedEventResponse typedResponse = new TableCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TableCreatedEventResponse> tableCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TABLECREATED_EVENT));
        return tableCreatedEventFlowable(filter);
    }

    public List<TableDroppedEventResponse> getTableDroppedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TABLEDROPPED_EVENT, transactionReceipt);
        ArrayList<TableDroppedEventResponse> responses = new ArrayList<TableDroppedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TableDroppedEventResponse typedResponse = new TableDroppedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TableDroppedEventResponse> tableDroppedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TableDroppedEventResponse>() {
            @Override
            public TableDroppedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TABLEDROPPED_EVENT, log);
                TableDroppedEventResponse typedResponse = new TableDroppedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TableDroppedEventResponse> tableDroppedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TABLEDROPPED_EVENT));
        return tableDroppedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> VersionMajor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSIONMAJOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> VersionMinor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSIONMINOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createSchema(byte[] _name) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATESCHEMA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createTable(byte[] _name, List<byte[]> _columns) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_name), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_columns, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteDirect(BigInteger _schema, BigInteger _table, BigInteger _index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEDIRECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_schema), 
                new org.web3j.abi.datatypes.generated.Uint256(_table), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> desc(BigInteger _table) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESC, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_table)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> dropSchema(BigInteger _schema) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DROPSCHEMA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_schema)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dropTable(BigInteger _schema, BigInteger _table) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DROPTABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_schema), 
                new org.web3j.abi.datatypes.generated.Uint256(_table)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BigInteger _major, BigInteger _minor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_major), 
                new org.web3j.abi.datatypes.generated.Uint32(_minor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> insert(BigInteger _table, List<String> _values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_table), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_values, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rowsCount(BigInteger _table) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROWSCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_table)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<List<String>> selectAll(BigInteger _table, BigInteger _offset, BigInteger _limit) throws Exception {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_table), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset), 
                new org.web3j.abi.datatypes.generated.Uint256(_limit)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicArray<Utf8String>>>() {}));
        
        String encodedFunction = FunctionEncoder.encode(function);
        
		String value = call(contractAddress, encodedFunction, defaultBlockParameter);
		
		return Decoder.decodeArrayOfArrayOfStrings(value);
    }

    public RemoteFunctionCall<List> showSchemas() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHOWSCHEMAS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> showTables() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHOWTABLES, 
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> updateDirect(BigInteger _schema, BigInteger _table, BigInteger _index, List<BigInteger> _columns, List<String> _values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEDIRECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_schema), 
                new org.web3j.abi.datatypes.generated.Uint256(_table), 
                new org.web3j.abi.datatypes.generated.Uint256(_index), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_columns, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_values, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Database load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Database(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Database load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Database(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Database load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Database(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Database load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Database(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Database> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Database.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Database> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Database.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Database> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Database.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Database> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Database.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class RowCreatedEventResponse extends BaseEventResponse {
        public BigInteger index;
    }

    public static class RowDeletedEventResponse extends BaseEventResponse {
        public BigInteger index;
    }

    public static class RowUpdatedEventResponse extends BaseEventResponse {
        public BigInteger index;
    }

    public static class SchemaCreatedEventResponse extends BaseEventResponse {
        public BigInteger index;

        public byte[] name;
    }

    public static class SchemaDroppedEventResponse extends BaseEventResponse {
        public BigInteger index;
    }

    public static class TableCreatedEventResponse extends BaseEventResponse {
        public BigInteger index;

        public byte[] name;
    }

    public static class TableDroppedEventResponse extends BaseEventResponse {
        public BigInteger index;
    }
}